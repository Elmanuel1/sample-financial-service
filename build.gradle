import org.springframework.boot.gradle.plugin.SpringBootPlugin
import org.testcontainers.containers.PostgreSQLContainer

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.testcontainers:postgresql:1.20.0'
        classpath 'org.testcontainers:testcontainers:1.20.0'
        classpath  'org.postgresql:postgresql:42.2.14'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'groovy'
    id 'java-library'
    id 'org.flywaydb.flyway' version '9.6.0'
    id 'nu.studer.jooq' version '8.2.1'
}

group 'com.spherelabs'
version '0.0.1-SNAPSHOT'
repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'


    implementation 'org.jooq:jooq-meta-extensions:3.18.4'
    implementation 'org.jooq:jooq'
    implementation 'org.jooq:jooq-meta'
    implementation 'org.jooq:jooq-codegen'

    implementation 'org.flywaydb:flyway-core:9.16.3'
    implementation 'io.vavr:vavr:0.10.4'
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation "org.flywaydb:flyway-core:9.8.1"

    compileOnly "org.projectlombok:lombok:1.18.30"
    compileOnly "org.mapstruct:mapstruct:1.4.2.Final"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
    annotationProcessor "org.mapstruct:mapstruct-processor:1.4.2.Final"
    annotationProcessor "org.projectlombok:lombok:1.18.30"
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation  'org.springframework.boot:spring-boot-starter-web'
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.testcontainers:spock"
    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    implementation platform(libs.testcontainers.bom)
    testImplementation libs.jakarta.inject.api
    testImplementation libs.spock.spring
    testImplementation libs.spock.core
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation('com.github.javafaker:javafaker:1.0.2') {
        exclude group: 'org.yaml', module: 'snakeyaml'
    }

    jooqGenerator 'org.postgresql:postgresql', 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'

}

jooq {
    version = "3.18.4"

    configurations {
        main {
            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    user = flyway.user
                    password = flyway.password
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }

                generator {
                    generate {
                        daos = true
                        springAnnotations = true
                        constructorPropertiesAnnotation = true
                        constructorPropertiesAnnotationOnPojos = true
                        constructorPropertiesAnnotationOnRecords = true

                    }
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                    }

                    target {
                        packageName = 'com.assetiq.jooq'
                        directory = "${project.buildDir}/jooq"
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

task postgresContainer {
    doFirst {
        def dbTestContainer = new PostgreSQLContainer("postgres:15")
                .withDatabaseName('postgres')
                .withUsername('postgres')
                .withPassword('postgres')
        logger.info('>> Starting temporary test-container to run migrations!')
        dbTestContainer.start()
        //Let's export the instance in order that let the doLast phase can turn it off
        ext.instance = dbTestContainer
        //We need recover the old Flyway url to let migrate task to run correctly
        ext.oldFlywayUrl = flyway.url

        jooq {
            configurations {
                main {
                    generationTool {
                        jdbc {
                            username = dbTestContainer.username
                            password = dbTestContainer.password
                            url = dbTestContainer.jdbcUrl
                        }
                    }
                }
            }
        }

        flyway {
            url = dbTestContainer.jdbcUrl
            user = dbTestContainer.username
            password = dbTestContainer.password
            locations = ["filesystem:${project.rootDir}/flyway"]
        }
    }
    finalizedBy flywayMigrate
}

tasks.named('generateJooq').configure {
    dependsOn postgresContainer

    allInputsDeclared = true

    doLast {
        postgresContainer.ext.properties.instance?.stop()
        flyway {
            url = postgresContainer.ext.properties.oldFlywayUrl
        }
    }
}
tasks.getByName('compileJava')
        .dependsOn('generateJooq')

sourceSets {
    main {
        java {
            srcDirs += ["${project.buildDir}/jooq"]
        }
    }
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

sourceSets {
    main {
        resources {
            srcDirs += "${rootProject}/flyway"
        }
    }
}

processTestResources {
    from("${rootProject}/flyway") {
        into 'flyway'
    }
}

bootJar {
    archiveFileName = project.name + '.jar'
}